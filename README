- もともとは、HAMT(Hash Array Mapped Trie)の永続版のerlang実装
 -- 素直に実装すると非効率だったので、修正を続けるうちにほとんど別物に ... 

実装中

[計測用メモ]
P = lists:map(fun(X) -> {X,X} end, lists:seq(1,1000000)).

{Time,H} = timer:tc(hashtrie, add_list, [P,hashtrie:new()]), Time. f(Time).
timer:tc(hashtrie, sh1, [P,H]).

{Time,H} = timer:tc(tree, dict_test, [P,dict:new()]), Time. f(Time).
timer:tc(tree, sh2, [P,H]).

erlang:garbage_collect(),erlang:memory().

dict_test([],Dict) -> Dict;
dict_test([{K,V}|Pairs],Dict) ->
    dict_test(Pairs, dict:store(K,V,Dict)).

sh2([],_) -> done;
sh2([{K,_}|Pairs],H) ->
    case dict:find(K,H) of
        {ok,_} -> sh2(Pairs,H);
        _ -> failed
    end.